meta:
  id: assert_wlast_last_beat
  category: assertion
  scoring: pass_fail
  simulators: []
description: |
  Title: Add WLAST Last-Beat Assertion (Static Check)

  Intent
  - Author a property `AXI_WLAST_LAST_BEAT_CHECK` in `src/hdl_top/master_assertions.sv` that ensures
    `wlast` is asserted only on the final data beat of a write burst (beat index equals `awlen`).
  - Bind or instantiate it in the existing interface context alongside other master checks.

  Procedure
  - Add a `property AXI_WLAST_LAST_BEAT_CHECK; ... endproperty` block referencing `wlast` and `awlen`.
  - You may implement a temporal count using sequence repetition or other SVA idioms. Keep it robust
    under VALID/READY handshaking.

  Expected Results
  - Static check passes: property exists in the file and contains both `wlast` and `awlen`.
  - (Optional future extension) Dynamic check: with a seeded BFM bug, the assertion fires in a
    negative run and holds in a clean run.

root:
  type: git
  url: git@github.com:mbits-mirafra/axi4_avip.git
  commit: 615f0d75555b8d3e28eda40248eb129f31162211
  patch: |
    *** Begin Patch
    *** End Patch

scope:
  allowed_edits:
    - src/hdl_top/master_assertions.sv

eval:
  timeout: 10
  patch: |
    *** Begin Patch
    *** End Patch
  python: |
    import os, re, sys
    try:
        from dvsmith.harness import report_result
    except Exception:
        def report_result(success, metrics=None, message=None):
            print(("PASS" if success else "FAIL"), metrics or {}, message or "")

    path = "src/hdl_top/master_assertions.sv"
    prop = "AXI_WLAST_LAST_BEAT_CHECK"
    snippets = ["wlast", "awlen"]
    if not os.path.exists(path):
        report_result(False, {"stage": "static"}, f"file not found: {path}"); sys.exit(2)
    txt = open(path, 'r', errors='ignore').read()
    m = re.search(rf"property\s+{re.escape(prop)}\s*;([\s\S]*?)endproperty", txt, re.MULTILINE)
    if not m:
        report_result(False, {"stage": "static"}, f"property not found: {prop}"); sys.exit(1)
    body = m.group(1)
    for s in snippets:
        if s not in body:
            report_result(False, {"stage": "static", "missing": s}, "snippet missing"); sys.exit(1)
    report_result(True)
    sys.exit(0)

expected_patch: |
  *** Begin Patch
  *** Update File: src/hdl_top/master_assertions.sv
  @@
  +  //Assertion:   AXI_WLAST_LAST_BEAT_CHECK
  +  //Description: WLAST must assert only on the last data beat of the burst (beat == awlen)
  +  property AXI_WLAST_LAST_BEAT_CHECK;
  +    @(posedge aclk) disable iff(!aresetn)
  +    (wvalid && wready, int'(0)) |->
  +      (wlast == 1'b0) throughout ((wvalid && wready)[*awlen]) ##1 (wvalid && wready && wlast);
  +  endproperty : AXI_WLAST_LAST_BEAT_CHECK
  +  AXI_WLAST_LAST_BEAT_CHECK_A: assert property (AXI_WLAST_LAST_BEAT_CHECK);
  *** End Patch

